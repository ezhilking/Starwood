package testscripts.gcRegression;
/** Purpose		: Validate that the RES CONF email should display correct currency code for each room rate and applicable taxes when the reservation is done for multi room using multiple rateplans of different currency codes.
 * TestCase Name: GC_REG79_ValidateResconfEmailDoneWithMultiRooms
 * Created By	: Sindhu.SR
 * Modified By	: 
 * Modified Date: 
 * Reviewed By	:	
 * Reviewed Date:
 * Comments 	: Reservation cannot be done with multi rates having different currency codes, hence creating multi room reservation with single rate and validating currency code 
 */
import java.util.Calendar;

import javax.xml.soap.SOAPMessage;

import org.apache.log4j.Level;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Test;


import functions.CRM;
import functions.Environment;
import functions.Reporter;
import functions.SoapUtility;
public class GC_REG79_ValidateResconfEmailDoneWithMultiRooms {

	CRM SW = new CRM();	
	String ReservationNumber,UserName,Password,LastName,PhoneNum;
	String TestCaseName= getClass().getName();
	String RequestXMLFile,RequestXMLFileCancel;

	@BeforeClass
	public void StartTest(){
		Environment.Tower = "CRM";
		Reporter.StartTest();
		TestCaseName=TestCaseName.substring(TestCaseName.lastIndexOf(".")+1, TestCaseName.length()).trim();
		UserName=SW.TestData("GCUsername");
		Password=SW.TestData("GCPassword");
		if(Environment.getRunEnvironment().equalsIgnoreCase("QA3")){
			RequestXMLFile= "GC_REG79_Booking Request_QA3_1471.xml";
		}
	}

	@Test(priority=1)	
	public void CreateMultiRoomReservation() {
		//call to soap server 
		SOAPMessage soapRequest=SoapUtility.getSOAPRequest(RequestXMLFile);
		//Modify the SOAP Request as per the requirement 
		SOAPMessage newSoapMessage=SW.ChangeTransactionIDInSoapRequest(soapRequest);

		String FutureArrivalDate= SW.DateAddDays(SW.GetTimeStamp("yyyy-MM-dd"), "yyyy-MM-dd", 15, Calendar.DATE);
		String FutureDepartureDate=SW.DateAddDays(SW.GetTimeStamp("yyyy-MM-dd"), "yyyy-MM-dd", 16, Calendar.DATE);

		//Get Arrival Date from Request 
		String actualArrivalDateStamp=SoapUtility.getXMLElementText(newSoapMessage, "ConfirmationDTO", "arrivalDate");
		String actualArrivalTimeStamp=actualArrivalDateStamp.substring(10, actualArrivalDateStamp.length());

		//Get DepartureDate from Request
		String actualDepartureDateStamp=SoapUtility.getXMLElementText(newSoapMessage, "ConfirmationDTO", "departureDate");
		String actualDepartureTimeStamp=actualDepartureDateStamp.substring(10, actualDepartureDateStamp.length());

		String NewArrivalTimeStamp=FutureArrivalDate+actualArrivalTimeStamp;

		String NewDepartureTimeStamp=FutureDepartureDate+actualDepartureTimeStamp;

		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "ConfirmationDTO", "arrivalDate", NewArrivalTimeStamp);
		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "ConfirmationDTO", "departureDate", NewDepartureTimeStamp);
		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "ConfirmationDTO", "startTime", NewArrivalTimeStamp);
		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "ConfirmationDTO", "endTime", NewDepartureTimeStamp);
		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "ProductDTO", "startTime", NewArrivalTimeStamp);
		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "ProductDTO", "endTime", NewDepartureTimeStamp);
		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "RateDTO", "startDate", NewArrivalTimeStamp);
		newSoapMessage=SoapUtility.setXMLElementTextForAll(newSoapMessage, "RateDTO", "endDate", NewArrivalTimeStamp);
		//SoapUtility.printSOAPResponse(newSoapMessage);

		SOAPMessage soapResponse=SoapUtility.getSOAPResponse(newSoapMessage, Environment.SOAPEndPointURL);
		boolean result=SoapUtility.validateSOAPResponseForFault(soapResponse);
		// Process the SOAP Response
		if(result){
			ReservationNumber=SoapUtility.getXMLElementText(soapResponse, "BinderDTO", "binderId");
			Environment.loger.log(Level.INFO, "Reservation Created Successfully");
			Environment.loger.log(Level.INFO, "Reservation Confirmation Number= "+ReservationNumber);
			SW.WriteToEmailTestData(TestCaseName, "ReservationNumber", ReservationNumber);
		}else{
			System.out.println("Error in SOAP Response see response file for more details");
			Environment.loger.log(Level.ERROR, "Error in SOAP Response see response file for more details");
			SoapUtility.printSOAPResponse(soapResponse);
		}
	}

	@AfterClass
	public void EndTest(){
		Reporter.StopTest();		
	}
}


